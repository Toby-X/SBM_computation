x <- c(x1, x0)
y <- c(y1, y0)
df_a <- data.frame(x = x, y = y, z = z)
plot(x[z==1], y[z==1], col = "red", pch = 18, xlab = "x", ylab = "y", xlim = c(5, 45))
points(x[z==0], y[z==0], col = "blue", pch = 19)
legend("topleft", legend=c("z = 1", "z = 0"),
col=c("red", "blue"),pch = 18:19, cex=.8)
mean(y[z==1]) - mean(y[z==0])
lm_a <- lm(y ~ x + z, data = df_a)
coef(lm_a)[3]
set.seed(20241105)
x <- runif(100, -10, 10)
z <- rbinom(100, 1, .5)
y <- 1 / (1 + exp(-x - 10*z + rnorm(100, 0, 1)))
df_b <- data.frame(x = x, y = y, z = z)
plot(x[z==1], y[z==1], col = "red", pch = 18, xlab = "x", ylab = "y", ylim = c(0, 1))
points(x[z==0], y[z==0], col = "blue", pch = 19)
legend("topleft", legend=c("z = 1", "z = 0"),
col=c("red", "blue"),pch = 18:19, cex=.8)
set.seed(20241105)
x <- runif(100, -10, 10)
z <- rbinom(100, 1, .5)
y <- 1 / (1 + exp(-x - 10*z + rnorm(100, 0, 1)))
df_b <- data.frame(x = x, y = y, z = z)
plot(x[z==1], y[z==1], col = "red", pch = 18, xlab = "x", ylab = "y",
ylim = c(0, 1))
points(x[z==0], y[z==0], col = "blue", pch = 19)
legend("bottomright", legend=c("z = 1", "z = 0"),
col=c("red", "blue"),pch = 18:19, cex=.8)
lm_b <- lm(y ~ x + z, data = df_b)
coef(lm_b)[3]
glm_b <- glm(y ~ x + z, data = df_b, family = binomial)
coef(glm_b)[3]
set.seed(20241105)
x <- runif(100, -10, 10)
z <- rbinom(100, 1, .5)
y <- rbinom(100, 1, 1 / (1 + exp(-x - 10*z + rnorm(100, 0, 1))))
df_b <- data.frame(x = x, y = y, z = z)
plot(x[z==1], y[z==1], col = "red", pch = 18, xlab = "x", ylab = "y",
ylim = c(0, 1))
points(x[z==0], y[z==0], col = "blue", pch = 19)
legend("bottomright", legend=c("z = 1", "z = 0"),
col=c("red", "blue"),pch = 18:19, cex=.8)
lm_b <- lm(y ~ x + z, data = df_b)
coef(lm_b)[3]
glm_b <- glm(y ~ x + z, data = df_b, family = binomial)
coef(glm_b)[3]
library(mvtnorm)
knitr::opts_chunk$set(echo = TRUE)
library(mvtnorm)
library(ggplot2)
n <- 1000
Sigma0 <- matrix(c(1,0,0,1), ncol=2, byrow=TRUE)
Sigma1 <- matrix(c(1,0.8,0.8,1), ncol=2, byrow=TRUE)
treatment <- rmvnorm(n, c(0, 0), Sigma1)
control <- rmvnorm(n, c(0, 0), Sigma0)
df_2 <- data.frame(rbind(treatment, control))
colnames(df_2) <- c("x", "y")
df_2$z <- rep(c(1,0), each=n)
df_2$z <- as.factor(df_2$z)
ggplot(df_2, aes(x=x, y=y, color=z)) + geom_point()
n <- 1000
Sigma0 <- matrix(c(1,0,0,1), ncol=2, byrow=TRUE)
Sigma1 <- matrix(c(1,0.8,0.8,1), ncol=2, byrow=TRUE)
treatment <- rmvnorm(n, c(0, 0), Sigma1)
control <- rmvnorm(n, c(0, 0), Sigma0)
df_2 <- data.frame(rbind(treatment, control))
colnames(df_2) <- c("x1", "x2")
df_2$z <- rep(c(1,0), each=n)
df_2$z <- as.factor(df_2$z)
ggplot(df_2) +
geom_histogram(aes(x=x1, fill=z), alpha=0.5, position="identity")
ggplot(df_2, aes(x=x1, y=x2, color=z)) + geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(mvtnorm)
library(ggplot2)
n <- 1000
Sigma0 <- matrix(c(1,0,0,1), ncol=2, byrow=TRUE)
Sigma1 <- matrix(c(1,0.8,0.8,1), ncol=2, byrow=TRUE)
treatment <- rmvnorm(n, c(0, 0), Sigma1)
control <- rmvnorm(n, c(0, 0), Sigma0)
df_2 <- data.frame(rbind(treatment, control))
colnames(df_2) <- c("x1", "x2")
df_2$z <- rep(c(1,0), each=n)
df_2$z <- as.factor(df_2$z)
ggplot(df_2) +
geom_histogram(aes(x=x1, fill=z), alpha=0.5, position="identity") +
ggtitle("Marginal Density of x1")
ggplot(df_2) +
geom_histogram(aes(x=x2, fill=z), alpha=0.5, position="identity") +
ggtitle("Marginal Density of x2")
ggplot(df_2, aes(x=x1, y=x2, color=z)) + geom_point()
set.seed(20241116)
n <- 1000
x1 <- runif(n, 0, 1)
x2 <- runif(n, 0, x1)
dat1 <- data.frame(x1, x2)
x1 <- runif(n, 0, 1)
x2 <- runif(n, x1, 1)
dat2 <- data.frame(x1, x2)
dat <- rbind(dat1, dat2)
dat$z <- rep(c(1,0), each=n)
dat$z <- as.factor(dat$z)
ggplot(dat) +
geom_histogram(aes(x=x1, fill=z), alpha=0.5, position="identity") +
ggtitle("Marginal Density of x1")
# Sigma0 <- matrix(c(1,0,0,1), ncol=2, byrow=TRUE)
# Sigma1 <- matrix(c(1,0.8,0.8,1), ncol=2, byrow=TRUE)
# treatment <- rmvnorm(n, c(0, 0), Sigma1)
# control <- rmvnorm(n, c(0, 0), Sigma0)
# df_2 <- data.frame(rbind(treatment, control))
# colnames(df_2) <- c("x1", "x2")
# df_2$z <- rep(c(1,0), each=n)
# df_2$z <- as.factor(df_2$z)
# ggplot(df_2) +
#   geom_histogram(aes(x=x1, fill=z), alpha=0.5, position="identity") +
#   ggtitle("Marginal Density of x1")
# ggplot(df_2) +
#   geom_histogram(aes(x=x2, fill=z), alpha=0.5, position="identity") +
#   ggtitle("Marginal Density of x2")
set.seed(20241116)
n <- 1000
x1 <- runif(n, 0, 1)
x2 <- runif(n, 0, x1)
dat1 <- data.frame(x1, x2)
x1 <- runif(n, 0, 1)
x2 <- runif(n, x1, 1)
dat2 <- data.frame(x1, x2)
dat <- rbind(dat1, dat2)
dat$z <- rep(c(1,0), each=n)
dat$z <- as.factor(dat$z)
ggplot(dat) +
geom_histogram(aes(x=x2, fill=z), alpha=0.5, position="identity") +
ggtitle("Marginal Density of x1")
# Sigma0 <- matrix(c(1,0,0,1), ncol=2, byrow=TRUE)
# Sigma1 <- matrix(c(1,0.8,0.8,1), ncol=2, byrow=TRUE)
# treatment <- rmvnorm(n, c(0, 0), Sigma1)
# control <- rmvnorm(n, c(0, 0), Sigma0)
# df_2 <- data.frame(rbind(treatment, control))
# colnames(df_2) <- c("x1", "x2")
# df_2$z <- rep(c(1,0), each=n)
# df_2$z <- as.factor(df_2$z)
# ggplot(df_2) +
#   geom_histogram(aes(x=x1, fill=z), alpha=0.5, position="identity") +
#   ggtitle("Marginal Density of x1")
# ggplot(df_2) +
#   geom_histogram(aes(x=x2, fill=z), alpha=0.5, position="identity") +
#   ggtitle("Marginal Density of x2")
set.seed(20241116)
n <- 1000
x1 <- runif(n, 0, 1)
x2 <- runif(n, 0, x1)
dat1 <- data.frame(x1, x2)
x1 <- runif(n, 0, 1)
x2 <- runif(n, 0, 1-x1)
dat2 <- data.frame(x1, x2)
dat <- rbind(dat1, dat2)
dat$z <- rep(c(1,0), each=n)
dat$z <- as.factor(dat$z)
ggplot(dat) +
geom_histogram(aes(x=x2, fill=z), alpha=0.5, position="identity") +
ggtitle("Marginal Density of x1")
# Sigma0 <- matrix(c(1,0,0,1), ncol=2, byrow=TRUE)
# Sigma1 <- matrix(c(1,0.8,0.8,1), ncol=2, byrow=TRUE)
# treatment <- rmvnorm(n, c(0, 0), Sigma1)
# control <- rmvnorm(n, c(0, 0), Sigma0)
# df_2 <- data.frame(rbind(treatment, control))
# colnames(df_2) <- c("x1", "x2")
# df_2$z <- rep(c(1,0), each=n)
# df_2$z <- as.factor(df_2$z)
# ggplot(df_2) +
#   geom_histogram(aes(x=x1, fill=z), alpha=0.5, position="identity") +
#   ggtitle("Marginal Density of x1")
# ggplot(df_2) +
#   geom_histogram(aes(x=x2, fill=z), alpha=0.5, position="identity") +
#   ggtitle("Marginal Density of x2")
ggplot(dat, aes(x=x1, y=x2, color=z)) + geom_point()
knitr::opts_chunk$set(echo = TRUE)
curve(function(x) 1-exp(-0.1*x),from=0,to=100)
# x <- seq(from=0,to=100,by=0.1)
# y <- 1 - exp(-0.1*x)
f <- function(x) 1-exp(-x)
curve(function(x) 1-exp(-0.1*x),from=0,to=100)
curve(f,from=0,to=100)
f <- function(x) 1-exp(-x)
curve(f,from=0,to=20)
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- runif(n,x,1)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(fit_obs$coef[1]+fit_obs$coef[2]*u,from=0,to=10,add=TRUE,col="red",lwd=1.75)
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- runif(n,x,1)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(fit_obs$coef[1]+fit_obs$coef[2]*x,from=0,to=10,add=TRUE,col="red",lwd=1.75)
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- runif(n,x,1)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(fit_obs$coef[1]+fit_obs$coef[2]*u,from=0,to=10,add=TRUE,col="red",lwd=1.75)
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- runif(n,x,1)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(fit_obs$coef[1]+fit_obs$coef[2]*x,from=0,to=10,add=TRUE,col="red",lwd=1.75)
fit_obs$coefficients
fit_obs$coef
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- runif(n,x,1)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(coef(fit_obs)[1]+coef(fit_obs)[2]*x,from=0,to=10,add=TRUE,col="red",lwd=1.75)
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- runif(n,x,0.5)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(coef(fit_obs)[1]+coef(fit_obs)[2]*x,from=0,to=10,add=TRUE,col="red",lwd=1.75)
coef(fit_obs)[1]+coef(fit_obs)[2]*u
u
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- rnorm(n,x,0.5)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(coef(fit_obs)[1]+coef(fit_obs)[2]*x,from=0,to=10,add=TRUE,col="red",lwd=1.75)
set.seed(123)
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- rnorm(n,x,1)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(coef(fit_obs)[1]+coef(fit_obs)[2]*x,from=0,to=10,add=TRUE,col="red",lwd=1.75)
set.seed(123)
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- rnorm(n,x,1.5)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(coef(fit_obs)[1]+coef(fit_obs)[2]*x,from=0,to=10,
add=TRUE,col="red",lwd=1.75)
set.seed(123)
a <- 1
b <- 2
n <- 100
x <- runif(n,0,10)
y <- a+b*x+rnorm(n,0,1)
u <- rnorm(n,x,2)
fit_oracle <- lm(y~x)
fit_obs <- lm(y~u)
curve(fit_oracle$coef[1]+fit_oracle$coef[2]*x,from=0,to=10,lwd=1.75)
curve(coef(fit_obs)[1]+coef(fit_obs)[2]*x,from=0,to=10,
add=TRUE,col="red",lwd=1.75)
knitr::opts_chunk$set(echo = TRUE)
gen_dat <- function(n, seed){
set.seed(seed)
x0 <- runif(n,0,10)
y0 <- 1+3*x0+rnorm(n,0,1)
x1 <- runif(n,0,10)
z1 <- 1
y1 <- 2+x1+z1+rnorm(n,0,1)
data <- data.frame(x=c(x0,x1),y=c(y0,y1),z=rep(c(0,1),each=n))
data
}
data <- gen_dat(100,123)
lm_fit <- lm(y~x*z,data=data)
summary(lm_fit)
gen_dat <- function(n, seed){
set.seed(seed)
x0 <- runif(n,0,10)
y0 <- 1+3*x0+rnorm(n,0,1)
x1 <- runif(n,0,10)
z1 <- 1
y1 <- 1+x1+z1+rnorm(n,0,1)
data <- data.frame(x=c(x0,x1),y=c(y0,y1),z=rep(c(0,1),each=n))
data
}
data <- gen_dat(100,123)
lm_fit <- lm(y~x*z,data=data)
summary(lm_fit)
data <- gen_dat(10,123)
lm_fit <- lm(y~x*z,data=data)
summary(lm_fit)
data <- gen_dat(100,123)
lm_fit <- lm(y~x*z,data=data)
summary(lm_fit)
data <- gen_dat(50,123)
lm_fit <- lm(y~x*z,data=data)
summary(lm_fit)
setwd("D:/Programmes/SBM_computation")
library(doSNOW)
library(tictoc)
library(blockmodels)
# wd set as the directory above
source("./utils.r")
source("./methods/Gibbs_Sampling.R")
source("./metrics.r")
vec2mat <- function(vec,K){
N <- length(vec)
mat <- matrix(0, nrow = N, ncol = K)
mat[cbind(1:N,vec)] <- 1
mat
}
train_vem <- function(N, K, beta, b, seed){
# generate data
data <- sbm_gen_diagdom(N, K, beta, b, seed)
A <- data$A
Z <- data$Z
B <- data$B
res <- blockmodels::BM_bernoulli("SBM_sym", A, verbosity = 0, plotting="",
exploration_factor=1, explore_min=K,
explore_max=K+1)
tic()
res$estimate()
time <- toc()
time <- time$toc - time$tic
Z_hat <- res$memberships[[K]]$Z
B_hat <- res$model_parameters[[K]]$pi
Z_hat <- apply(Z_hat, 1, which.max)
Z_hat <- vec2mat(Z_hat, K)
# find the best permutation
idx <- find_best_idx(Z, Z_hat)
Z_hat <- Z_hat[, idx]
z_clust <- mat2vec(Z)
z_hat_clust <- mat2vec(Z_hat)
# calculate the metrics
Z_ARI <- ARI(z_clust, z_hat_clust)
Z_NMI <- NMI(z_clust, z_hat_clust)
Z_F1_Score <- F1_Score(z_clust, z_hat_clust)
Z_Accuracy <- ERROR(z_clust, z_hat_clust)
B_lower <- B[lower.tri(B, diag = TRUE)]
B_hat_lower <- B_hat[lower.tri(B_hat, diag = TRUE)]
B_MAE <- MAE(B_lower, B_hat_lower)
B_MSE <- MSE(B_lower, B_hat_lower)
list(Z_ARI = Z_ARI, Z_NMI = Z_NMI, Z_F1_Score = Z_F1_Score,
Z_Accuracy = Z_Accuracy, B_MAE = B_MAE, B_MSE = B_MSE, time = time,
N = N, K = K, beta = beta, b = b, seed = seed)
}
library(sbm)
N <- 250
K <- 3
beta <- 0
b <- 0.1
seed <- 1
# generate data
data <- sbm_gen_diagdom(N, K, beta, b, seed)
A <- data$A
Z <- data$Z
B <- data$B
fit_sbm <- estimateSimpleSBM(A)
sbm_fit
fit_sbm
fit_sbm$nbBlocks
K <- 5
# generate data
data <- sbm_gen_diagdom(N, K, beta, b, seed)
A <- data$A
Z <- data$Z
B <- data$B
fit_sbm <- estimateSimpleSBM(A)
fit_sbm$nbBlocks
fit_sbm <- estimateSimpleSBM(A, estimOptions = list(nbCores=1))
fit_sbm <- estimateSimpleSBM(A, estimOptions = list(nbCores=2))
fit_sbm <- estimateSimpleSBM(A, estimOptions = list(nbCores=6))
N <- 2e3
# generate data
data <- sbm_gen_diagdom(N, K, beta, b, seed)
A <- data$A
Z <- data$Z
B <- data$B
fit_sbm <- estimateSimpleSBM(A, estimOptions = list(nbCores=6))
fit_sbm <- estimateSimpleSBM(A, estimOptions = list(nbCores=6L))
estimOptions <- list(
nbCores=2,
nbBlocksRange=list(min=K, max=K)
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
N <- 500
# generate data
data <- sbm_gen_diagdom(N, K, beta, b, seed)
A <- data$A
Z <- data$Z
B <- data$B
estimOptions <- list(
nbCores=2,
nbBlocksRange=list(min=K, max=K),
plot = F,
)
estimOptions <- list(
nbCores=2,
nbBlocksRange=list(min=K, max=K),
plot = F
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
estimOptions <- list(
nbCores=2,
nbBlocksRange=list(min=K, max=K+1),
plot = F
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
estimOptions <- list(
nbCores=2,
nbBlocksRange=list(min=K, max=K+1),
plot = F,
exploreFactor=1
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
fit_sbm$nbBlocks
K
estimOptions <- list(
nbCores=2,
nbBlocksRange=list(min=K, max=K+1),
plot = F,
exploreFactor=0
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
estimOptions <- list(
nbCores=2,
nbBlocksRange=list(min=K, max=K+1),
plot = F,
exploreFactor=1.5
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
estimOptions <- list(
nbCores=2,
nbBlocksRange=list(min=K, max=K+1),
plot = F,
exploreFactor=1,
exploreMin=K,
exploreMax=K+1
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
estimOptions$nbBlocksRange
fit_sbm$nbBlocks
estimOptions <- list(
nbCores=2,
nbBlocksRange=list(min=1, max=1),
plot = F,
exploreFactor=1,
exploreMin=K,
exploreMax=K+1
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
estimOptions <- list(
nbCores=2,
nbBlocksRange=c(1,1),
plot = F,
exploreFactor=1,
exploreMin=K,
exploreMax=K+1
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
estimOptions <- list(
nbCores=2,
nbBlocksRange=c(1,2),
plot = F,
exploreFactor=1,
exploreMin=K,
exploreMax=K+1
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
estimOptions <- list(
nbCores=2,
nbBlocksRange=c(1,2),
plot = F,
exploreFactor=1,
exploreMin=K-1,
exploreMax=K+1
)
fit_sbm <- estimateSimpleSBM(A, estimOptions = estimOptions)
